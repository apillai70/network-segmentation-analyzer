#!/usr/bin/env python3
"""
Generate Professional README.docx User Manual
==============================================
Creates a comprehensive customer-facing manual explaining how to read and
interpret network segmentation diagrams.

Output: README.docx (in project root)

Author: PruTech Network Security Team
"""

from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.style import WD_STYLE_TYPE
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def add_heading(doc, text, level=1):
    """Add a styled heading"""
    heading = doc.add_heading(text, level=level)
    if level == 1:
        heading.runs[0].font.color.rgb = RGBColor(0, 51, 102)  # Dark Navy Blue - banking standard
        heading.runs[0].font.size = Pt(24)
    elif level == 2:
        heading.runs[0].font.color.rgb = RGBColor(52, 84, 149)  # Medium Navy
        heading.runs[0].font.size = Pt(18)
    return heading


def add_bullet_point(doc, text, level=0):
    """Add a bullet point with proper indentation"""
    para = doc.add_paragraph(text, style='List Bullet' if level == 0 else 'List Bullet 2')
    para.paragraph_format.space_after = Pt(6)
    return para


def add_numbered_item(doc, text):
    """Add a numbered list item"""
    para = doc.add_paragraph(text, style='List Number')
    para.paragraph_format.space_after = Pt(6)
    return para


def generate_readme():
    """Generate the README.docx user manual"""
    doc = Document()

    # Set default font - Arial for banking/professional documents
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Arial'
    font.size = Pt(11)

    # ========== COVER PAGE ==========
    title = doc.add_paragraph()
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = title.add_run('Network Segmentation Analyzer\n\n')
    run.font.size = Pt(28)
    run.font.bold = True
    run.font.color.rgb = RGBColor(0, 51, 102)  # Dark Navy Blue
    run.font.name = 'Arial'

    subtitle = title.add_run('User Guide for Reading Network Diagrams')
    subtitle.font.size = Pt(20)
    subtitle.font.color.rgb = RGBColor(52, 84, 149)  # Medium Navy
    subtitle.font.name = 'Arial'

    doc.add_paragraph()
    doc.add_paragraph()

    # Version info
    version_para = doc.add_paragraph()
    version_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    version_run = version_para.add_run('Version 3.0')
    version_run.font.size = Pt(14)
    version_run.font.italic = True
    version_run.font.name = 'Arial'

    doc.add_paragraph()

    # Prepared by
    prepared = doc.add_paragraph()
    prepared.alignment = WD_ALIGN_PARAGRAPH.CENTER
    prep_run = prepared.add_run('\nPrepared by: PruTech Network Security Team')
    prep_run.font.size = Pt(12)
    prep_run.font.bold = True
    prep_run.font.name = 'Arial'

    doc.add_page_break()

    # ========== TABLE OF CONTENTS ==========
    add_heading(doc, 'Table of Contents', level=1)

    toc_items = [
        ('1. Introduction', ''),
        ('2. Types of Diagrams', ''),
        ('3. Reading the Diagrams', ''),
        ('   3.1 Shapes and Visual Elements', ''),
        ('   3.2 Colors and Security Zones', ''),
        ('   3.3 Line Types and Patterns', ''),
        ('4. Understanding Data Sources', ''),
        ('5. Upstream vs Downstream Dependencies', ''),
        ('6. Circle Sizes and Visual Indicators', ''),
        ('7. Unknown Connections Explained', ''),
        ('8. Interactive Features (HTML Diagrams)', ''),
        ('9. Using Diagrams for Security Analysis', ''),
        ('10. Frequently Asked Questions', ''),
    ]

    for item, page in toc_items:
        p = doc.add_paragraph(item)
        p.paragraph_format.space_after = Pt(3)

    doc.add_page_break()

    # ========== 1. INTRODUCTION ==========
    add_heading(doc, '1. Introduction', level=1)

    doc.add_paragraph(
        'Welcome to the Network Segmentation Analyzer user guide. This document will help you '
        'understand and interpret the network topology diagrams generated by our analysis system.'
    )

    doc.add_paragraph()

    add_heading(doc, 'What You Will Learn', level=2)
    add_bullet_point(doc, 'How to read tier-based network architecture diagrams')
    add_bullet_point(doc, 'Understanding upstream and downstream dependencies')
    add_bullet_point(doc, 'Interpreting data source attribution (observed vs predicted)')
    add_bullet_point(doc, 'Using diagrams for security analysis and segmentation planning')

    doc.add_paragraph()

    add_heading(doc, 'Who Should Read This', level=2)
    doc.add_paragraph(
        'This guide is intended for:'
    )
    add_bullet_point(doc, 'Network administrators planning security segmentation')
    add_bullet_point(doc, 'Security architects designing zero-trust architectures')
    add_bullet_point(doc, 'Application owners understanding their dependencies')
    add_bullet_point(doc, 'Compliance teams assessing regulatory requirements (PCI-DSS, HIPAA, etc.)')

    doc.add_page_break()

    # ========== 2. TYPES OF DIAGRAMS ==========
    add_heading(doc, '2. Types of Diagrams', level=1)

    doc.add_paragraph(
        'The Network Segmentation Analyzer generates two main types of diagrams for each application:'
    )

    doc.add_paragraph()

    add_heading(doc, '2.1 Standard Tier-Based Diagrams', level=2)
    doc.add_paragraph(
        'These diagrams show your application organized by network tiers (Web, App, Data, etc.) on the left side, '
        'with external dependencies (databases, queues, downstream applications) on the right side.'
    )

    para = doc.add_paragraph()
    run = para.add_run('Files: ')
    run.bold = True
    para.add_run('{APP}_diagram.html, {APP}_diagram.mmd, {APP}_diagram.png')

    doc.add_paragraph()

    add_heading(doc, '2.2 Application Data Flow Diagrams', level=2)
    doc.add_paragraph(
        'These diagrams show internal application architecture with component grouping by type '
        '(databases, caches, queues) and application-level data flows.'
    )

    para = doc.add_paragraph()
    run = para.add_run('Files: ')
    run.bold = True
    para.add_run('{APP}_application_diagram.html, {APP}_application_diagram.mmd, {APP}_application_diagram.png')

    doc.add_page_break()

    # ========== 3. READING THE DIAGRAMS ==========
    add_heading(doc, '3. Reading the Diagrams', level=1)

    add_heading(doc, '3.1 Shapes and Visual Elements', level=2)

    doc.add_paragraph()

    # Shapes table equivalent
    add_heading(doc, 'Shape Guide:', level=3)

    add_bullet_point(doc, 'BOXES (Rectangles): Network tiers/zones containing multiple servers')
    add_bullet_point(doc, 'CIRCLES: Services, APIs, or application endpoints')
    add_bullet_point(doc, 'RECTANGLES: Data stores (databases), caches, message queues')
    add_bullet_point(doc, 'CYLINDERS: Database systems (specialized data store shape)')
    add_bullet_point(doc, 'ROUNDED BOXES: External systems or downstream applications')

    doc.add_paragraph()

    para = doc.add_paragraph()
    run = para.add_run('Important: ')
    run.bold = True
    run.font.color.rgb = RGBColor(231, 76, 60)  # Red
    para.add_run(
        'The SIZE of circles does NOT indicate importance or traffic volume. '
        'All shapes are sized for readability. Traffic volume is indicated by LINE THICKNESS.'
    )

    doc.add_paragraph()

    add_heading(doc, '3.2 Colors and Security Zones', level=2)

    doc.add_paragraph(
        'Background colors indicate security zones and risk levels:'
    )

    doc.add_paragraph()

    add_bullet_point(doc, 'RED/PINK (#ffcccc): Web Tier - High Risk (internet-facing)')
    add_bullet_point(doc, 'BLUE (#cce5ff): Application Tier - Medium Risk (business logic)')
    add_bullet_point(doc, 'ORANGE (#ff9966): Data Tier - High Value (databases, sensitive data)')
    add_bullet_point(doc, 'LIGHT ORANGE (#ffcc99): Cache Tier (Redis, Memcache)')
    add_bullet_point(doc, 'PURPLE (#cc99ff): Messaging Tier (Kafka, RabbitMQ)')
    add_bullet_point(doc, 'YELLOW (#ffff99): Management Tier (infrastructure, monitoring)')
    add_bullet_point(doc, 'GRAY (#e0e0e0): Unknown - Could not be classified from network data')

    doc.add_paragraph()

    para = doc.add_paragraph()
    run = para.add_run('Security Implication: ')
    run.bold = True
    para.add_run(
        'Higher risk zones (Red, Orange) should have stricter firewall rules and cannot communicate directly '
        'with each other without passing through the Application Tier.'
    )

    doc.add_paragraph()

    add_heading(doc, '3.3 Line Types and Patterns', level=2)

    doc.add_paragraph(
        'Lines connecting components show network traffic flows:'
    )

    doc.add_paragraph()

    add_bullet_point(doc, 'THICK SOLID LINES (=====>) : High volume (>100 network flows)')
    add_bullet_point(doc, 'SOLID LINES (--->) : Medium volume (10-100 flows)')
    add_bullet_point(doc, 'DASHED LINES (-.-.-> ) : Low volume (<10 flows) or Predicted connections')

    doc.add_paragraph()

    para = doc.add_paragraph()
    run = para.add_run('Arrow Direction: ')
    run.bold = True
    para.add_run(
        'Arrows point in the direction of traffic flow. A → B means "A initiates connections to B".'
    )

    doc.add_page_break()

    # ========== 4. UNDERSTANDING DATA SOURCES ==========
    add_heading(doc, '4. Understanding Data Sources', level=1)

    doc.add_paragraph(
        'The diagrams distinguish between three types of connections based on data source:'
    )

    doc.add_paragraph()

    add_heading(doc, '4.1 Black Solid Lines = Observed Data (ExtraHop)', level=2)
    para = doc.add_paragraph()
    run = para.add_run('Source: ')
    run.bold = True
    para.add_run('Network flow data captured from ExtraHop monitoring')

    para = doc.add_paragraph()
    run = para.add_run('Reliability: ')
    run.bold = True
    run.font.color.rgb = RGBColor(39, 174, 96)  # Green
    para.add_run('HIGHEST - These connections were actually observed on your network')

    para = doc.add_paragraph()
    run = para.add_run('Usage: ')
    run.bold = True
    para.add_run('Use these for primary segmentation decisions and firewall rules')

    doc.add_paragraph()

    add_heading(doc, '4.2 Blue Dashed Lines = ML Predictions', level=2)
    para = doc.add_paragraph()
    run = para.add_run('Source: ')
    run.bold = True
    para.add_run('Machine Learning type inference or Markov chain predictions based on usage patterns')

    para = doc.add_paragraph()
    run = para.add_run('Reliability: ')
    run.bold = True
    run.font.color.rgb = RGBColor(52, 152, 219)  # Blue
    para.add_run('MEDIUM - Predicted based on similar applications and network patterns')

    para = doc.add_paragraph()
    run = para.add_run('Usage: ')
    run.bold = True
    para.add_run(
        'Consider these as "likely dependencies" that should be verified with application teams before '
        'implementing firewall rules'
    )

    doc.add_paragraph()

    add_heading(doc, '4.3 Gray Dashed Lines = Unknown/Unclassified', level=2)
    para = doc.add_paragraph()
    run = para.add_run('Source: ')
    run.bold = True
    para.add_run('Connections that could not be classified from available network data')

    para = doc.add_paragraph()
    run = para.add_run('Reliability: ')
    run.bold = True
    run.font.color.rgb = RGBColor(149, 165, 166)  # Gray
    para.add_run('LOWEST - Requires manual investigation')

    para = doc.add_paragraph()
    run = para.add_run('Usage: ')
    run.bold = True
    para.add_run(
        'Flag these for application owners to provide details on the service type and purpose'
    )

    doc.add_paragraph()

    para = doc.add_paragraph()
    run = para.add_run('IMPORTANT: ')
    run.bold = True
    run.font.color.rgb = RGBColor(231, 76, 60)
    para.add_run(
        'Always verify ML predictions with application teams before implementing restrictive firewall rules. '
        'False positives could break application functionality.'
    )

    doc.add_page_break()

    # ========== 5. UPSTREAM VS DOWNSTREAM ==========
    add_heading(doc, '5. Upstream vs Downstream Dependencies', level=1)

    add_heading(doc, 'Understanding Terminology', level=2)

    para = doc.add_paragraph()
    run = para.add_run('UPSTREAM: ')
    run.bold = True
    para.add_run(
        'Services that YOUR application DEPENDS ON. If upstream services fail, your application may fail.\n'
        'Examples: Databases, caches, authentication services, third-party APIs'
    )

    doc.add_paragraph()

    para = doc.add_paragraph()
    run = para.add_run('DOWNSTREAM: ')
    run.bold = True
    para.add_run(
        'Services that DEPEND ON your application. If your application fails, downstream services may fail.\n'
        'Examples: Web frontends calling your API, reporting systems pulling your data'
    )

    doc.add_paragraph()

    add_heading(doc, 'How to Identify in Diagrams', level=2)

    doc.add_paragraph(
        'In our tier-based diagrams:'
    )

    add_bullet_point(doc, 'LEFT SIDE: Your application tiers (Web, App, Data, etc.)')
    add_bullet_point(doc, 'RIGHT SIDE: External dependencies grouped by type')
    add_bullet_point(doc, 'ARROWS POINTING RIGHT (→): Your app depends on these (UPSTREAM)')
    add_bullet_point(doc, 'ARROWS POINTING LEFT (←): These depend on your app (DOWNSTREAM - less common)')

    doc.add_paragraph()

    add_heading(doc, 'Segmentation Implications', level=2)

    para = doc.add_paragraph()
    para.add_run(
        'For micro-segmentation planning:'
    )

    add_numbered_item(doc,
        'UPSTREAM dependencies: Must allow OUTBOUND traffic from your app tier to these services '
        '(e.g., App Tier → Database Tier on port 3306)'
    )

    add_numbered_item(doc,
        'DOWNSTREAM dependencies: Must allow INBOUND traffic from these services to your app tier '
        '(e.g., Web Tier → App Tier on port 8080)'
    )

    add_numbered_item(doc,
        'DENY ALL other traffic: Use "default deny" rules for any connections not shown in diagrams'
    )

    doc.add_page_break()

    # ========== 6. CIRCLE SIZES ==========
    add_heading(doc, '6. Circle Sizes and Visual Indicators', level=1)

    add_heading(doc, 'Do Circle Sizes Matter?', level=2)

    para = doc.add_paragraph()
    run = para.add_run('Short Answer: NO')
    run.bold = True
    run.font.size = Pt(14)

    doc.add_paragraph()

    doc.add_paragraph(
        'Circle and box sizes in the diagrams are automatically sized for READABILITY, '
        'not for indicating traffic volume, importance, or server count.'
    )

    doc.add_paragraph()

    add_heading(doc, 'What DOES Indicate Importance?', level=2)

    add_numbered_item(doc,
        'LINE THICKNESS: Thicker lines = higher traffic volume = more critical dependency'
    )

    add_numbered_item(doc,
        'LINE COLOR: Black solid = actually observed (most reliable), Blue dashed = predicted (verify first)'
    )

    add_numbered_item(doc,
        'SERVER COUNT: Look for "X server(s)" in tier boxes - more servers may indicate higher availability needs'
    )

    add_numbered_item(doc,
        'ZONE COLORS: Red/Orange zones contain higher-risk or higher-value assets requiring stricter controls'
    )

    doc.add_paragraph()

    para = doc.add_paragraph()
    run = para.add_run('Example: ')
    run.bold = True
    para.add_run(
        'A small circle with a thick black line is MORE important than a large circle with a thin dashed line.'
    )

    doc.add_page_break()

    # ========== 7. UNKNOWN CONNECTIONS ==========
    add_heading(doc, '7. Unknown Connections Explained', level=1)

    doc.add_paragraph(
        'You may see some connections labeled as "Unknown" or shown in gray. This section explains why.'
    )

    doc.add_paragraph()

    add_heading(doc, 'What Are Unknown Connections?', level=2)

    doc.add_paragraph(
        'Unknown connections are network flows that could not be definitively classified based on available '
        'ExtraHop network flow data.'
    )

    doc.add_paragraph()

    add_heading(doc, 'Common Causes', level=2)

    add_numbered_item(doc,
        'MISSING SERVICE INDICATORS: Destination endpoints do not have clear service type indicators '
        'in their network signatures (e.g., non-standard ports, encrypted traffic)'
    )

    add_numbered_item(doc,
        'INSUFFICIENT CONTEXT: Flow data lacks sufficient context to determine the application protocol '
        '(e.g., generic TCP connections without payload inspection)'
    )

    add_numbered_item(doc,
        'CUSTOM SERVICES: Connections involve custom or proprietary services without standard port/protocol '
        'patterns (e.g., internal RPC frameworks, custom APIs)'
    )

    doc.add_paragraph()

    add_heading(doc, 'Recommended Actions', level=2)

    para = doc.add_paragraph()
    run = para.add_run('Step 1: ')
    run.bold = True
    para.add_run('Identify the IP addresses involved in Unknown connections')

    para = doc.add_paragraph()
    run = para.add_run('Step 2: ')
    run.bold = True
    para.add_run('Contact application owners to determine the service type and purpose')

    para = doc.add_paragraph()
    run = para.add_run('Step 3: ')
    run.bold = True
    para.add_run('Update firewall documentation with correct service classifications')

    para = doc.add_paragraph()
    run = para.add_run('Step 4: ')
    run.bold = True
    para.add_run(
        'If these are test/development connections, consider excluding them from production '
        'segmentation rules'
    )

    doc.add_page_break()

    # ========== 8. INTERACTIVE FEATURES ==========
    add_heading(doc, '8. Interactive Features (HTML Diagrams)', level=1)

    doc.add_paragraph(
        'HTML diagram files (*.html) provide interactive features for easier navigation:'
    )

    doc.add_paragraph()

    add_heading(doc, 'Navigation Controls', level=2)

    add_bullet_point(doc, 'MOUSE WHEEL: Zoom in/out')
    add_bullet_point(doc, 'CLICK & DRAG: Pan around the diagram')
    add_bullet_point(doc, '4-WAY ARROWS: Pan in specific directions')
    add_bullet_point(doc, 'FIT TO SCREEN: Auto-resize diagram to fit your screen')
    add_bullet_point(doc, 'RESET VIEW: Return to original zoom and position')

    doc.add_paragraph()

    add_heading(doc, 'Legend Controls', level=2)

    para = doc.add_paragraph()
    run = para.add_run('NEW: ')
    run.bold = True
    run.font.color.rgb = RGBColor(39, 174, 96)  # Green
    para.add_run(
        'The legend can now be hidden/shown using the X button to save screen space. '
        'Click "Show Legend" to bring it back.'
    )

    doc.add_paragraph()

    add_heading(doc, 'Exporting and Sharing', level=2)

    doc.add_paragraph(
        'Three formats are available for each diagram:'
    )

    add_bullet_point(doc, 'HTML: Interactive version for analysis (best for detailed review)')
    add_bullet_point(doc, 'PNG: Static image for presentations and documentation')
    add_bullet_point(doc, 'MMD: Mermaid source code for editing or import into other tools')

    doc.add_page_break()

    # ========== 9. USING FOR SECURITY ANALYSIS ==========
    add_heading(doc, '9. Using Diagrams for Security Analysis', level=1)

    add_heading(doc, '9.1 Micro-Segmentation Planning', level=2)

    doc.add_paragraph(
        'Follow these steps to use diagrams for zero-trust segmentation:'
    )

    add_numbered_item(doc,
        'IDENTIFY TIERS: Note which tiers exist (Web, App, Data, etc.)'
    )

    add_numbered_item(doc,
        'MAP ALLOWED FLOWS: For each thick black line, create an "ALLOW" firewall rule'
    )

    add_numbered_item(doc,
        'VERIFY PREDICTIONS: For blue dashed lines, verify with app teams before allowing'
    )

    add_numbered_item(doc,
        'DENY ALL ELSE: Implement "default deny" for any traffic not explicitly shown'
    )

    add_numbered_item(doc,
        'MONITOR UNKNOWN: Flag Unknown connections for investigation before production deployment'
    )

    doc.add_paragraph()

    add_heading(doc, '9.2 Compliance Requirements', level=2)

    doc.add_paragraph(
        'These diagrams help satisfy regulatory requirements:'
    )

    add_bullet_point(doc,
        'PCI-DSS 1.2.1: Network diagrams showing cardholder data flows'
    )

    add_bullet_point(doc,
        'HIPAA Security Rule: Technical safeguards documentation (§164.312)'
    )

    add_bullet_point(doc,
        'SOX IT Controls: Documentation of critical financial system dependencies'
    )

    add_bullet_point(doc,
        'GDPR Article 32: Documentation of security measures for personal data'
    )

    doc.add_paragraph()

    add_heading(doc, '9.3 Incident Response', level=2)

    doc.add_paragraph(
        'During security incidents, use diagrams to:'
    )

    add_bullet_point(doc,
        'IDENTIFY BLAST RADIUS: Which systems could be affected if this server is compromised?'
    )

    add_bullet_point(doc,
        'LATERAL MOVEMENT PATHS: What connections would an attacker use to move to high-value systems?'
    )

    add_bullet_point(doc,
        'CONTAINMENT POINTS: Where should firewall rules be tightened to isolate the incident?'
    )

    add_bullet_point(doc,
        'DEPENDENCY IMPACT: If we isolate this system, what downstream services will be affected?'
    )

    doc.add_page_break()

    # ========== 10. FAQ ==========
    add_heading(doc, '10. Frequently Asked Questions', level=1)

    add_heading(doc, 'Q: Why are some IPs shown instead of hostnames?', level=3)
    doc.add_paragraph(
        'A: This can occur when: (1) DNS reverse lookup failed, (2) The IP is in a demo/test environment '
        'without proper DNS registration, or (3) The system could not resolve the hostname. In these cases, '
        'the raw IP address is displayed. For real hostnames, you will see "IP - Hostname" format.'
    )

    doc.add_paragraph()

    add_heading(doc, 'Q: Can I edit the diagrams?', level=3)
    doc.add_paragraph(
        'A: Yes! The .mmd (Mermaid) files can be edited with any text editor or imported into tools like '
        'Lucidchart, Draw.io, or Mermaid Live Editor (mermaid.live). Make changes and regenerate the diagrams.'
    )

    doc.add_paragraph()

    add_heading(doc, 'Q: How often should diagrams be regenerated?', level=3)
    doc.add_paragraph(
        'A: Recommended frequency: (1) After major application deployments or architecture changes, '
        '(2) Quarterly for stable environments, (3) Before security audits or compliance reviews, '
        '(4) After discovering unauthorized network connections in monitoring.'
    )

    doc.add_paragraph()

    add_heading(doc, 'Q: What if I see connections that should not exist?', level=3)
    doc.add_paragraph(
        'A: This is a SECURITY FINDING. Black solid lines represent actual observed traffic. If you see '
        'a connection that violates your security policy (e.g., Web Tier directly connecting to Database Tier), '
        'investigate immediately for: (1) Misconfigured applications, (2) Shadow IT, (3) Potential compromise, '
        '(4) Incomplete firewall rules.'
    )

    doc.add_paragraph()

    add_heading(doc, 'Q: Can the ML predictions be improved?', level=3)
    doc.add_paragraph(
        'A: Yes! The ML Predictions Dashboard (if available) provides a feedback system. Mark predictions as '
        'Correct or Wrong, and the model will improve over time. More training data = better predictions.'
    )

    doc.add_paragraph()

    add_heading(doc, 'Q: Why do some applications have no Unknown connections while others do?', level=3)
    doc.add_paragraph(
        'A: Applications using standard technologies (MySQL, Redis, Kafka) on standard ports are easier to '
        'classify automatically. Custom in-house services or applications using non-standard ports/protocols '
        'are more likely to appear as Unknown until manually classified.'
    )

    doc.add_page_break()

    # ========== FOOTER ==========
    section = doc.sections[0]
    footer = section.footer
    footer_para = footer.paragraphs[0]
    footer_para.text = 'Prepared by: PruTech Network Security Team\nConfidential - For Internal Use Only'
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

    # Save document
    output_path = 'README.docx'
    doc.save(output_path)
    logger.info(f"[SUCCESS] README.docx saved: {output_path}")
    print(f"\n[SUCCESS] Professional README.docx generated!")
    print(f"Location: {output_path}")
    print("\nThis document contains:")
    print("  - Complete guide to reading network diagrams")
    print("  - Data source explanations (Observed vs Predicted)")
    print("  - Upstream/Downstream dependency guide")
    print("  - Security analysis workflows")
    print("  - Compliance mapping (PCI-DSS, HIPAA, SOX, GDPR)")
    print("  - FAQ section")
    print("\nReady to share with customers!")


if __name__ == '__main__':
    generate_readme()

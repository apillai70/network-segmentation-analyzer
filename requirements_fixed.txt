# ============================================================================
# Network Segmentation Analyzer v3.0 - Requirements (Python 3.11 Compatible)
# Complete Network + Application Topology Discovery
# ============================================================================

# Core dependencies
pandas>=2.0.0
numpy>=1.24.0
networkx>=3.0

# Machine learning (classical)
scikit-learn>=1.3.0

# Deep Learning (OPTIONAL - install separately if needed)
# See installation note below

# Graph algorithms
python-louvain>=0.16
cdlib>=0.3.0

# Visualization
matplotlib>=3.7.0
seaborn>=0.12.0
plotly>=5.17.0

# Document generation
python-docx>=1.0.0
Pillow>=10.0.0
reportlab>=4.0.0

# Utilities
tqdm>=4.65.0
joblib>=1.3.0
pyyaml>=6.0

# Web Application
flask>=3.0.0
psycopg2-binary>=2.9.0
gunicorn>=21.0.0

# Testing
pytest>=7.4.0
pytest-cov>=4.1.0
pytest-mock>=3.12.0

# Code quality
black>=23.0.0
flake8>=7.0.0
mypy>=1.7.0

# Development tools
ipython>=8.18.0
jupyterlab>=4.0.0

# ============================================================================
# Installation Instructions:
# ============================================================================
#
# STEP 1: Install main packages
#   pip install -r requirements_fixed.txt
#
# STEP 2 (OPTIONAL): Install PyTorch for deep learning features
#   pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
#
# NOTE: PyTorch is OPTIONAL. The system works without it using classical ML only.
#
# ============================================================================

  ✅ All Fixes Verified Working

  1. UTF-8 Encoding - All emojis displayed correctly (✓, 📦, 📁, 💾, 🔄, 🌐, 🚀)
  2. Dependency Checks - pyyaml detected correctly as 'yaml' module
  3. Cleanup Function - Deleted all previous run data and started fresh (as requested)
  4. Synthetic Data Generation - Successfully generated 140 application flow files
  5. Web App Import - No circular import error, Flask app loaded via importlib
  6. Database Fallback - Gracefully fell back to JSON storage when PostgreSQL auth failed
  7. Incremental Learning - Background process started (PID: 25388)
  8. Web UI - Successfully started on http://127.0.0.1:5000

  System Status

  🌐 WEB UI IS NOW RUNNING:
  - Local: http://127.0.0.1:5000
  - Network: http://192.168.86.44:5000
  - Dashboard: http://127.0.0.1:5000/
  - Topology: http://127.0.0.1:5000/topology
  - Applications: http://127.0.0.1:5000/applications

  📊 Data Generated:
  - 140 synthetic application flow files in data/input/
  - Each with realistic traffic patterns (web, API, database, datamart, payment types detected)
  - IPv4 and IPv6 flows generated
  - Multiple protocol types (HTTP, HTTPS, TCP, TLS, DB2, ORACLE, etc.)

  💾 Storage:
  - Using JSON file backend (PostgreSQL fallback worked correctly)
  - All data persisted in outputs_final/ directory

  Note on PostgreSQL

  The PostgreSQL authentication failed, but this is not a problem because:
  - System automatically fell back to JSON storage (as designed)
  - All functionality works with JSON backend
  - You can fix PostgreSQL credentials later if needed (password for 'postgres' user)

  What You Can Do Now

  1. Open the Web UI in your browser: http://127.0.0.1:5000
  2. Explore the topology and application dependencies
  3. View 140 applications with their flow patterns
  4. Press Ctrl+C in the terminal to stop the system when done

  All the issues from before are now resolved! The system is fully operational.

"""
Application-Level Word Document Generator
==========================================
Generates individual Word documents for each application with embedded diagrams.

Author: Network Security Team
Version: 1.0
"""

import logging
from pathlib import Path
from datetime import datetime
from docx import Document
from docx.shared import Inches, Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.section import WD_ORIENT

logger = logging.getLogger(__name__)


class ApplicationArchitectureDocument:
    """Generates individual application architecture documents"""

    def __init__(self, app_name: str):
        """Initialize document for specific application

        Args:
            app_name: Application name/identifier
        """
        self.app_name = app_name
        self.doc = Document()
        self._setup_styles()

    def _setup_styles(self):
        """Setup custom styles for the document"""
        styles = self.doc.styles

        try:
            title_style = styles['Title']
            title_style.font.size = Pt(32)
            title_style.font.color.rgb = RGBColor(0, 51, 102)
        except:
            pass

    def generate_document(self, png_path: str, output_path: str):
        """Generate application architecture document with embedded diagram

        Args:
            png_path: Path to PNG diagram file
            output_path: Output path for Word document
        """
        logger.info(f"Generating Word document for: {self.app_name}")

        # Title page (portrait)
        self._add_title_page()
        self.doc.add_page_break()

        # Diagram page (landscape)
        self._add_diagram_page(png_path)

        # Add new section to return to portrait orientation
        section = self.doc.add_section()
        section.orientation = WD_ORIENT.PORTRAIT
        # Swap dimensions back to portrait
        new_width, new_height = section.page_height, section.page_width
        section.page_width = new_width
        section.page_height = new_height

        # Architecture overview (portrait)
        self._add_architecture_overview()

        # Save document
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)

        self.doc.save(str(output_file))
        logger.info(f"Success: Word document saved: {output_path}")

    def _add_title_page(self):
        """Add title page with application name"""
        # Main title
        title = self.doc.add_heading(f'Network Segmentation\nSolutions Architecture Document - {self.app_name}', level=0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Spacing
        self.doc.add_paragraph()
        self.doc.add_paragraph()
        self.doc.add_paragraph()

        # Document info
        info_para = self.doc.add_paragraph()
        info_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        info_para.add_run('Version: 1.0\n').bold = True
        info_para.add_run(f'Date: {datetime.now().strftime("%B %d, %Y")}\n')
        info_para.add_run('Classification: Internal\n')

        self.doc.add_paragraph()
        self.doc.add_paragraph()

        # Footer
        footer = self.doc.add_paragraph()
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER
        footer.add_run('Prepared by: Network Security Team\n')
        footer.add_run('Auto-generated by Network Segmentation Analyzer\n')

    def _add_diagram_page(self, png_path: str):
        """Add page with embedded diagram in LANDSCAPE orientation with rotated image"""

        # Change this section to landscape orientation
        section = self.doc.sections[-1]
        section.orientation = WD_ORIENT.LANDSCAPE
        # Swap page dimensions for landscape
        new_width, new_height = section.page_height, section.page_width
        section.page_width = new_width
        section.page_height = new_height

        self.doc.add_heading('Application Data Flow Diagram', level=1)

        self.doc.add_paragraph(
            f'The following diagram shows the architecture and data flows for {self.app_name}, '
            'including internal application tiers, downstream applications, and infrastructure dependencies.'
        )

        self.doc.add_paragraph()

        # Embed PNG diagram - horizontal, full width, auto-scaled height
        png_file = Path(png_path)
        if png_file.exists():
            try:
                # NO rotation - keep image horizontal as generated
                # Landscape page: 11" wide x 8.5" tall, with 1" margins = 9" usable width
                # Set width to 8.5 inches (95% of page width)
                # Height auto-scales to preserve aspect ratio (will be 1.5-2x larger)
                self.doc.add_picture(str(png_file), width=Inches(8.5))
                logger.info(f"  PNG embedded (horizontal, width=8.5in, height=auto): {png_file.name}")

            except Exception as e:
                logger.error(f"  Failed to embed PNG: {e}")
                self.doc.add_paragraph(f'Note: Diagram could not be embedded - {e}')
        else:
            self.doc.add_paragraph(f'Note: Diagram image not found at {png_path}')

        self.doc.add_paragraph()

        # Legend
        self.doc.add_heading('Diagram Legend', level=2)

        legend_items = [
            'Application Box (with direction TB) = Internal architecture showing application tiers',
            'Web Tier = Frontend servers handling user requests',
            'App Tier = Backend application servers',
            'Data Tier = Database servers',
            'Cache Tier = Caching layer (Redis, Memcache)',
            'Messaging Tier = Message queues (Kafka, RabbitMQ)',
            'Management Tier = Infrastructure management and monitoring',
            'Downstream Applications (Circles) = External applications this app calls',
            'Infrastructure (Rectangles) = Databases, caches, and queues',
            'Thick lines (===) = Application-to-application calls',
            'Regular lines (---) = Infrastructure dependencies',
            'Colors indicate security zones and tiers'
        ]

        for item in legend_items:
            self.doc.add_paragraph(item, style='List Bullet')

    def _add_architecture_overview(self):
        """Add architecture overview section"""
        self.doc.add_heading('Architecture Overview', level=1)

        self.doc.add_heading('Internal Application Architecture', level=2)

        self.doc.add_paragraph(
            f'The {self.app_name} application is structured using a multi-tier architecture pattern. '
            'Each tier has specific responsibilities and communicates with adjacent tiers through '
            'well-defined interfaces.'
        )

        self.doc.add_paragraph()

        tier_descriptions = [
            'Web Tier: Handles incoming HTTP/HTTPS requests, load balancing, and SSL termination',
            'App Tier: Contains business logic, API endpoints, and application processing',
            'Data Tier: Manages persistent data storage and database operations',
            'Cache Tier: Provides high-speed data caching to reduce database load',
            'Messaging Tier: Handles asynchronous messaging and event processing',
            'Management Tier: Manages monitoring, logging, and operational tools'
        ]

        for desc in tier_descriptions:
            self.doc.add_paragraph(desc, style='List Bullet')

        self.doc.add_paragraph()

        self.doc.add_heading('External Dependencies', level=2)

        self.doc.add_paragraph(
            'The application interacts with various external systems:'
        )

        self.doc.add_paragraph()

        dependency_types = [
            'Downstream Applications: Other applications that this app calls directly',
            'Databases: Persistent data stores (MySQL, PostgreSQL, etc.)',
            'Caches: In-memory data stores (Redis, Memcache)',
            'Message Queues: Asynchronous messaging systems (Kafka, RabbitMQ)'
        ]

        for dep_type in dependency_types:
            self.doc.add_paragraph(dep_type, style='List Bullet')

        self.doc.add_paragraph()

        self.doc.add_heading('Security Considerations', level=2)

        security_notes = [
            'All traffic between tiers should be encrypted using TLS/SSL',
            'Database access should be restricted to App Tier servers only',
            'Management ports should not be accessible from external networks',
            'Implement micro-segmentation with strict firewall rules between tiers',
            'Monitor all cross-tier traffic for suspicious patterns',
            'Apply principle of least privilege for all inter-tier communications'
        ]

        for note in security_notes:
            self.doc.add_paragraph(note, style='List Bullet')


def generate_application_document(app_name: str, png_path: str, output_path: str):
    """Generate application architecture Word document

    Args:
        app_name: Application name
        png_path: Path to PNG diagram
        output_path: Output path for Word document

    Returns:
        Path to generated document
    """
    doc_gen = ApplicationArchitectureDocument(app_name)
    doc_gen.generate_document(png_path, output_path)

    logger.info(f"Success: Application document generated: {output_path}")
    return output_path
